Answers to questions:
1. The disadvantages of implementing the struct _MyString in the
header file is that this struct will be then closed to changes.
The header defines the interface with which people work. so when
deciding what members a struct will have we are limiting the implementation
possibilites for the whole program.
For instance, our program could have been implemented using a reference counting
design and the members MyString structs in that design are very different from
my current implementation (I know, I have tried...).
This leaves us room to implement as we see fit, and even change the entire
implementation without (hopefully) affecting anybody that uses this struct.

2. The _MyString struct is DECLARED (not implemented) in the header file so a flag is
left for the linker (like function declerations) that this struct will be implemented.
If an implementation of this struct won't be found in linkage, the linker will throw
an error. For pre-processing and compilation, the compiler needs not to know the size
and structure of the _MyString struct, only that such exists.
Therefore, the compilation will be successful even though explicit implementation isn't
given.
